import numpy as np
import cv2 as cv
import argparse

def auto_canny(image, sigma=0.33):
    # compute the median of the single channel pixel intensities
    v = np.median(image)
    # apply automatic Canny edge detection using the computed median
    lower = int(max(0, (1.0 - sigma) * v))
    upper = int(min(255, (1.0 + sigma) * v))
    edged = cv.Canny(image, lower, upper)
    
    return edged
    
def main(image_file_path):
    img = cv.imread(image_file_path)
    gray = cv.cvtColor(img, cv.COLOR_BGR2GRAY, 0.7)
    cv.imshow("Gray", gray)
    (T, thresh) = cv.threshold(gray, 155, 255, cv.THRESH_BINARY)
    cv.imshow("Thresh", thresh)
    kernel = cv.getStructuringElement(cv.MORPH_RECT, (10, 5))
    closed = cv.morphologyEx(thresh, cv.MORPH_CLOSE, kernel)
    cv.imshow("Closed", closed)
    closed = cv.erode(closed, None, iterations=14)
    closed = cv.dilate(closed, None, iterations=13)
    ret, mask = cv.threshold(closed, 155, 255, cv.THRESH_BINARY)
    # apply AND operation on image and mask generated by thresholding
    final = cv.bitwise_and(img, img, mask=mask)
    # plot the result
    cv.imshow("Final detect", final)
    canny = auto_canny(closed)
    cv.imshow("Canny", canny)
    (cnts, _) = cv.findContours(canny.copy(), cv.RETR_EXTERNAL,

    cv.CHAIN_APPROX_SIMPLE)
    cv.drawContours(img, cnts, -1, (0, 255, 0), 2)
    cv.imshow("Final image", img)
    cv.waitKey(0)
    cv.destroyAllWindows()

if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument("--imagepath", dest = "image_file_path", type = str,
                        default = None, help = "Image file path")
    args = parser.parse_args()
    image_file_path = args.image_file_path
    main(image_file_path)